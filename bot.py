from config import TOKEN_GPT, TOKEN_TG, LOG_FILE
from db import save_user, add_favorite, get_favorites
from logger import logger, gpt_logger, quiz_logger, dialog_logger
from telegram.ext import ApplicationBuilder, MessageHandler, filters, CallbackQueryHandler, CommandHandler
from gpt import *
from util import *
import asyncio
import os

def log_user_action(update, text: str):
    user = update.effective_user or update.callback_query.from_user
    username = user.username or user.first_name or "Unknown"
    user_id = user.id
    dialog_logger.info(f"[{user_id}] {username}: {text}")

async def start(update, context):
    dialog.mode = 'main'
    msg = load_message('main')
    await send_photo(update, context,'avatar_main')
    await send_text(update, context, msg)
    await show_main_menu(update, context,{
        'start':'–≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –±–æ—Ç–∞',
        'random': '—Ü—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç',
        'gpt' : '—Ä–æ–∑–º–æ–≤–∞ –∑—ñ –®–Ü',
        'talk' : '–î—ñ–∞–ª–æ–≥ –∑ –≤—ñ–¥–æ–º–æ—é –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é',
        'quiz' : '–≥—Ä–∞ "–°–∞–º–∏–π —Ä–æ–∑—É–º–Ω–∏–π"',
        'photo' : '–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∏–π –∑—ñ—Ä',
        'recept': '–ö—É–ª—ñ–Ω–∞—Ä–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫',

    })
    chatgpt.message_list.clear()

async def random_fact(update, context):
    text = update.message.text if update.message and update.message.text else ''

    log_user_action(update, f"–Ω–∞–ø–∏—Å–∞–≤: {text}")
    dialog.mode = 'random_fact'

    await send_photo(update, context, 'fact')
    promt = load_prompt('random_fact')

    try:
        answer = await chatgpt.send_question(promt, text)
        await send_text_buttons(update, context, answer, {
            "fact_random": '–©–µ —Ü—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç',
            "fact_start": '–ó–∞–∫—ñ–Ω—á–∏—Ç–∏'
        })
    except Exception as e:
        error_text = f"‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ñ–∞–∫—Ç—É: {e}"
        await send_text(update, context, error_text)
        log_user_action(update, f" ‚Äî {error_text}")


async def button_fact(update, context):
    query = update.callback_query
    await query.answer()

    log_user_action(update, f"–Ω–∞—Ç–∏—Å–Ω—É–≤: {query}")

    if query.data == 'fact_random':
        text = query.message.text if query.message and query.message.text else ''
        promt = load_prompt('random_fact')
        answer = await chatgpt.send_question(promt, text)

        # –¢–µ–ø–µ—Ä –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –æ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç–æ–º —ñ –∫–Ω–æ–ø–∫–∞–º–∏
        await send_text_buttons(update, context, answer, {
            "fact_random": '–©–µ —Ü—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç',
            "fact_start": '–ó–∞–∫—ñ–Ω—á–∏—Ç–∏'
        })

    elif query.data == 'fact_start':
        await start(update, context)  # —Ç–æ–π —Å–∞–º–∏–π —Ö–µ–Ω–¥–ª–µ—Ä, —â–æ —ñ –¥–ª—è /start


async def gpt(update, context):
    dialog.mode ='gpt'
    await send_photo(update, context,'gpt')
    msg = load_message('gpt')
    await send_text(update, context, msg)

async def gpt_dialog(update, context):
    text = update.message.text if update.message and update.message.text else ''
    if not text:
        return  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    gpt_logger.info(f"[{update.effective_user.id}] GPT: {text}")

    try:
        answer = await chatgpt.add_message(text)
        await send_text(update, context, answer)
    except Exception as e:
        await send_text(update, context, f"‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ GPT: {e}")

async def talk(update, context):
    dialog.mode ='talk'
    msg = load_message('talk')
    await send_photo(update, context,'talk')
    await send_text_buttons(update, context, msg, {
        'talk_mask': '–Ü–ª–æ–Ω –ú–∞—Å–∫',
        'talk_jobs': '–°—Ç—ñ–≤ –î–∂–æ–±—Å',
        'talk_geyts': '–ë—ñ–ª –ì–µ–π—Ç—Å',
    })

async def talk_button(update, context):
    callback = update.callback_query
    query_data = callback.data

    await callback.answer()
    log_user_action(update, f"–Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É: {query_data}")

    await send_photo(update, context, query_data)
    await send_text(update, context, '–ì–∞—Ä–Ω–∏–π –≤–∏–±—ñ—Ä...')

    promt = load_prompt(query_data)
    chatgpt.set_prompt(promt)
    dialog.mode = 'talk'  #  –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ä–µ–∂–∏–º –¥–ª—è –¥—ñ–∞–ª–æ–≥—É


async def talk_dialog(update, context):
    text = update.message.text
    if not text:
        return

    log_user_action(update, f"–Ω–∞–ø–∏—Å–∞–≤ —É GPT-–¥—ñ–∞–ª–æ–∑—ñ: {text}")

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    my_msg = await send_text(update, context, '‚úçÔ∏è –ù–∞–±–∏—Ä–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å...')

    try:
        answer = await chatgpt.add_message(text)
        # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await my_msg.edit_text(answer)
    except Exception as e:
        # –Ø–∫—â–æ GPT-4o –≤–ø–∞–≤ ‚Äî –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ
        await my_msg.edit_text(f"‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ GPT:\n{e}")

#quiz
async def quiz(update, context):
    dialog.mode = 'quiz'
    context.user_data['quiz_score'] = 0  # –°–∫–∏–¥–∞–Ω–Ω—è –±–∞–ª—ñ–≤
    await send_photo(update, context, 'quiz')
    msg = load_message('quiz')
    await send_text_buttons(update, context, msg, {
        'quiz_science': '–ù–∞—É–∫–∞ —ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó',
        'quiz_world': '–°–≤—ñ—Ç –Ω–∞–≤–∫–æ–ª–æ –Ω–∞—Å',
        'quiz_culture': '–ö—É–ª—å—Ç—É—Ä–∞ —Ç–∞ –º–∏—Å—Ç–µ—Ü—Ç–≤–æ',
        'quiz_history': '–Ü—Å—Ç–æ—Ä—ñ—è —Ç–∞ —Å—É—á–∞—Å–Ω—ñ—Å—Ç—å',
    })

async def quiz_button(update, context):
    callback = update.callback_query
    query_data = callback.data
    dialog.mode = 'quiz'

    await callback.answer()
    log_user_action(update, f"–Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É: {query_data}")

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ "–ó–∞–≤–µ—Ä—à–∏—Ç–∏"
    if query_data == 'quiz_end':
        score = context.user_data.get('quiz_score', 0)
        await send_text(update, context, f"üèÅ –í—ñ–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.")
        return

    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–æ—Ç–æ
    try:
        await send_photo(update, context, query_data)
    except FileNotFoundError:
        await send_text(update, context, "‚ö†Ô∏è –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    await send_text(update, context, 'üéØ –í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é. –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –∑–∞–ø–∏—Ç–∞–Ω—å!')

    prompt = load_prompt(query_data)
    context.user_data['quiz_prompt'] = prompt
    context.user_data['quiz_score'] = 0

    await ask_new_question(update, context, prompt)

async def ask_new_question(update, context, prompt):
    await send_text(update, context, "‚ùì –ü–∏—Ç–∞–Ω–Ω—è –≥–æ—Ç—É—î—Ç—å—Å—è...")

    raw_question = await chatgpt.send_question(prompt, "–ó–≥–µ–Ω–µ—Ä—É–π –æ–¥–Ω–µ –∫–æ—Ä–æ—Ç–∫–µ –ø–∏—Ç–∞–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –∑ 4 –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç–∞ —á—ñ—Ç–∫–æ –∑–∞–∑–Ω–∞—á –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –§–æ—Ä–º–∞—Ç –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π:\n"
"–ü–∏—Ç–∞–Ω–Ω—è: ...\n–ê) ...\n–ë) ...\n–í) ...\n–ì) ...\n–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: <–ª–∏—à–µ –æ–¥–Ω–∞ –ª—ñ—Ç–µ—Ä–∞ –ê/–ë/–í/–ì>"
)

    parsed = parse_quiz_question(raw_question)

    if not parsed['question'] or len(parsed['options']) != 4 or not parsed['correct']:
        await send_text(update, context, "‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–∏—Ç–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    context.user_data['quiz_correct'] = parsed['correct']
    await send_text_buttons(update, context, parsed['question'], {
        **parsed['options'],
        'quiz_end': 'üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏'
    })
    #await send_text(update, context, f"üß™ –¢–µ—Å—Ç–æ–≤–∏–π –≤–∏–≤—ñ–¥ GPT:\n\n{raw_question}")

def parse_quiz_question(text: str) -> dict:
    lines = [line.strip() for line in text.strip().split('\n') if line.strip()]
    result = {
        'question': '',
        'options': {},
        'correct': ''
    }

    option_map = {'–ê': 'quiz_A', '–ë': 'quiz_B', '–í': 'quiz_C', '–ì': 'quiz_D'}

    for line in lines:
        if line.lower().startswith("–ø–∏—Ç–∞–Ω–Ω—è:"):
            result['question'] = line.partition(':')[2].strip()
        elif any(line.startswith(f"{k})") for k in option_map):
            prefix = line[0]
            key = option_map.get(prefix)
            result['options'][key] = line[2:].strip()
        elif "–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å" in line.lower():
            letter = line.strip()[-1].upper()
            result['correct'] = option_map.get(letter, '')

    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if not result['question'] or len(result['options']) != 4 or not result['correct']:
        return {'question': '', 'options': {}, 'correct': ''}

    return result

async def quiz_answer(update, context):
    callback = update.callback_query
    answer = callback.data
    correct = context.user_data.get('quiz_correct')
    user_id = callback.from_user.id

    await callback.answer()

    if answer == 'quiz_end':
        score = context.user_data.get('quiz_score', 0)
        quiz_logger.info(f"[{user_id}] –ó–∞–≤–µ—Ä—à–∏–≤ –≤—ñ–∫—Ç–æ—Ä–∏–Ω—É. –†–µ–∑—É–ª—å—Ç–∞—Ç: {score}")
        await send_text(update, context, f"üèÅ –í—ñ–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.")
        return

    if not correct:
        quiz_logger.warning(f"[{user_id}] –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")
        await send_text(update, context, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    if answer == correct:
        context.user_data['quiz_score'] += 1
        quiz_logger.info(f"[{user_id}] ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–≤: {answer}")
        await send_text(update, context, "‚úÖ –í—ñ—Ä–Ω–æ!")
    else:
        correct_letter = correct[-1]
        quiz_logger.info(f"[{user_id}] ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –û–±—Ä–∞–≤: {answer}, –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {correct}")
        await send_text(update, context, f"‚ùå –ù–µ–≤—ñ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct_letter}")

    await asyncio.sleep(1)
    await send_text(update, context, "üìö –ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –≥–æ—Ç—É—î—Ç—å—Å—è...")

    prompt = context.user_data.get('quiz_prompt')
    if not prompt:
        await send_text(update, context, "‚ö†Ô∏è –ù–µ –æ–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /quiz –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")
        return

    await ask_new_question(update, context, prompt)

#photo
async def photo_mode_start(update, context):
    dialog.mode = 'photo'
    await send_text(update, context, "üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏.")

async def photo_handler(update, context):
    if dialog.mode != 'photo':
        await send_text(update, context, "üì∑ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–æ–∂–Ω–∞ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ª–∏—à–µ –≤ —Ä–µ–∂–∏–º—ñ /photo.")
        return

    user = update.effective_user
    photo = update.message.photo[-1]

    file = await context.bot.get_file(photo.file_id)
    os.makedirs("user_photos", exist_ok=True)
    file_path = f"user_photos/{user.id}_{photo.file_id}.jpg"
    await file.download_to_drive(file_path)

    await send_text(update, context, "üß† –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...")

    try:
        result = await chatgpt.describe_image(file_path)
        await send_text(update, context, f"üì∑ GPT-4o –∫–∞–∂–µ: {result}")
    except Exception as e:
        await send_text(update, context, f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É GPT-4o: {e}")
    dialog.mode = 'main'

    await asyncio.sleep(2)
    await send_text(update, context, "üè† –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.")
    await start(update, context)

#recept
async def recept(update, context):

    user = update.effective_user
    save_user(user)  # –ó–±–µ—Ä–µ–≥—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    dialog.mode ='recept'

    await send_photo(update, context,'recept')

    msg = load_message('recept')
    await send_text(update, context, msg)

async def recept_button(update, context):
    query = update.callback_query
    await query.answer()

    log_user_action(update, f"–Ω–∞—Ç–∏—Å–Ω—É–≤: {query}")

    if query.data == 'recept_next':
        ingredients = context.user_data.get('ingredients', '')
        promt = load_prompt('recept')
        promt_filled = promt.format(ingredients=ingredients)
        chatgpt.set_prompt(promt_filled)
        answer = await chatgpt.send_message_list()

        await send_text_buttons(update, context, answer, {
            "recept_next": '–©–µ —Ä–µ—Ü–µ–ø—Ç–∏',
            "recept_save": 'üìå –î–æ–¥–∞—Ç–∏ –≤ –æ–±—Ä–∞–Ω–µ',
            "recept_favorites": 'üç¥ –ú–æ—ó –æ–±—Ä–∞–Ω—ñ —Ä–µ—Ü–µ–ø—Ç–∏',
            "recept_end": '–ó–∞–∫—ñ–Ω—á–∏—Ç–∏'
        })
    elif query.data == 'recept_save':
        user_id = query.from_user.id
        recipe_text = query.message.text
        add_favorite(user_id, recipe_text)
        await send_text(update, context, "‚úÖ –†–µ—Ü–µ–ø—Ç –¥–æ–¥–∞–Ω–æ –¥–æ –æ–±—Ä–∞–Ω–æ–≥–æ!")

    elif query.data == 'recept_favorites':
        await favorites(update, context)  # —Ç–æ–π —Å–∞–º–∏–π —Ö–µ–Ω–¥–ª–µ—Ä, —â–æ —ñ –¥–ª—è /favorites

    elif query.data == 'recept_end':
        await start(update, context)  # —Ç–æ–π —Å–∞–º–∏–π —Ö–µ–Ω–¥–ª–µ—Ä, —â–æ —ñ –¥–ª—è /start


async def recept_dialog(update, context):
    if dialog.mode != 'recept':
        return
    text = update.message.text if update.message and update.message.text else ''
    if not text:
        return  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    context.user_data['ingredients'] = text
    chatgpt.message_list.clear()

    gpt_logger.info(f"[{update.effective_user.id}] GPT: {text}")

    try:
        promt_template = load_prompt('recept')
        promt = promt_template.format(ingredients=text)
        chatgpt.set_prompt(promt)  # –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ prompt
        answer = await chatgpt.send_message_list()  # –æ—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å GPT
        await send_text_buttons(update, context, answer, {
            "recept_next": '–©–µ —Ä–µ—Ü–µ–ø—Ç–∏',
            "recept_save": 'üìå –î–æ–¥–∞—Ç–∏ –≤ –æ–±—Ä–∞–Ω–µ',
            "recept_favorites": 'üç¥ –ú–æ—ó –æ–±—Ä–∞–Ω—ñ —Ä–µ—Ü–µ–ø—Ç–∏',
            "recept_end": '–ó–∞–∫—ñ–Ω—á–∏—Ç–∏'
        })

    except Exception as e:
        await send_text(update, context, f"‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ GPT: {e}")

async def favorites(update, context):
    user_id = update.effective_user.id
    favs = get_favorites(user_id)
    if not favs:
        await send_text(update, context, "üì≠ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ä–µ—Ü–µ–ø—Ç—ñ–≤.")
    else:
        await send_text(update, context, "üìö –í–∞—à—ñ —É–ª—é–±–ª–µ–Ω—ñ —Ä–µ—Ü–µ–ø—Ç–∏:")
        for recipe in favs:
            await send_text(update, context, recipe)


async def dialog_mode(update, context):
    if dialog.mode == 'gpt':
        await send_text(update, context, "GPT-mode " + update.message.from_user.name)
        await gpt_dialog(update, context)
    elif dialog.mode == 'random_fact':
        await random_fact(update, context)
    elif dialog.mode == 'talk':
        await talk_dialog(update, context)
    elif dialog.mode == 'quiz':
        await send_text(update, context, "‚úã –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫.")

    elif dialog.mode == 'photo':
        await photo_handler(update, context)
    elif dialog.mode == 'recept':
        await recept_dialog(update, context)

dialog = Dialog()
dialog.mode = 'main'

chatgpt = ChatGptService(token=TOKEN_GPT)
app = ApplicationBuilder().token(TOKEN_TG).build()
app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler('random', random_fact))
app.add_handler(CommandHandler('gpt', gpt))
app.add_handler(CommandHandler('talk', talk))
app.add_handler(CommandHandler('quiz', quiz))
app.add_handler(CommandHandler('photo', photo_mode_start))
app.add_handler(CommandHandler('recept', recept))
app.add_handler(CommandHandler('favorites', favorites))


app.add_handler(CallbackQueryHandler(quiz_answer, pattern="^quiz_[A-D]$"))
app.add_handler(CallbackQueryHandler(button_fact, pattern="^fact_.*"))
app.add_handler(CallbackQueryHandler(talk_button, pattern="^talk_.*"))
app.add_handler(CallbackQueryHandler(quiz_button, pattern="^quiz_.*"))
app.add_handler(CallbackQueryHandler(recept_button, pattern="^recept_.*"))
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), dialog_mode))
app.add_handler(MessageHandler(filters.PHOTO, photo_handler))

if __name__ == '__main__':
    app.run_polling()
